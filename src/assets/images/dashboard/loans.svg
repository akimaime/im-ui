<svg xmlns="http://www.w3.org/2000/svg" width="11.346" height="13.077" viewBox="0 0 11.346 13.077"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="Group_3835" data-name="Group 3835" transform="translate(-39.617 -373.496)">
    <path id="Path_2834" data-name="Path 2834" d="M513.552,71.592c-.167-.045-.34-.075-.5-.136a2.1,2.1,0,0,1-1.331-2.386c.231-1.219.449-2.442.71-3.655a4.18,4.18,0,0,1,2.585-3.088l.114-.047a1.242,1.242,0,0,1,.425-1.677c-.019-.037-.039-.078-.061-.118q-.352-.643-.7-1.286a.428.428,0,0,1,.4-.684h2.6a.428.428,0,0,1,.407.682c-.254.466-.51.932-.767,1.4a1.244,1.244,0,0,1,.461,1.611l.067.043a.422.422,0,0,1,.179.531.439.439,0,0,1-.508.241,6.056,6.056,0,0,0-1-.156,3.406,3.406,0,0,0-3.384,2.734c-.245,1.221-.475,2.445-.706,3.669a1.262,1.262,0,0,0,1.218,1.473c.557.009,1.115,0,1.672,0a.42.42,0,0,1,.243.77c-.042.028-.088.048-.132.073Zm2.944-9.574c.111,0,.221,0,.332,0a.363.363,0,0,0,.351-.339.343.343,0,0,0-.3-.382,5.123,5.123,0,0,0-.764,0,.342.342,0,0,0-.3.38.357.357,0,0,0,.348.34C516.275,62.023,516.386,62.019,516.5,62.019Zm-.636-2.654c0,.014,0,.023,0,.03.178.328.355.656.536.983.054.1.153.087.212-.019q.255-.462.507-.926a.385.385,0,0,0,.022-.067Z" transform="translate(-472.064 314.98)" fill="#fff"/>
    <path id="Path_2835" data-name="Path 2835" d="M541.458,106.236a7.165,7.165,0,0,1-.783-.158,3.9,3.9,0,0,1-2.861-3.177,3.994,3.994,0,0,1,2.906-4.59,4.032,4.032,0,1,1,1.892,7.837c-.178.04-.36.06-.54.089Zm-2.872-4.032a3.187,3.187,0,1,0,3.19-3.193A3.193,3.193,0,0,0,538.586,102.2Z" transform="translate(-494.838 280.336)" fill="#fff"/>
    <path id="Path_2836" data-name="Path 2836" d="M558.505,121.519a.471.471,0,0,1-.4-.273.392.392,0,0,1,.083-.469c.253-.258.51-.512.765-.768l1.3-1.3a.411.411,0,0,1,.454-.113.4.4,0,0,1,.277.349.39.39,0,0,1-.115.338c-.7.7-1.392,1.4-2.094,2.09A1.078,1.078,0,0,1,558.505,121.519Z" transform="translate(-512.592 262.506)" fill="#fff"/>
    <path id="Path_2837" data-name="Path 2837" d="M573.2,134.531a.56.56,0,0,1-.56.559.568.568,0,0,1-.558-.564.56.56,0,0,1,.563-.556A.553.553,0,0,1,573.2,134.531Z" transform="translate(-524.843 249.051)" fill="#fff"/>
    <path id="Path_2838" data-name="Path 2838" d="M558.929,118.586a.554.554,0,0,1-.553-.563.558.558,0,1,1,1.116.01A.553.553,0,0,1,558.929,118.586Z" transform="translate(-512.864 263.471)" fill="#fff"/>
  </g>
</svg>