<svg xmlns="http://www.w3.org/2000/svg" id="Group_3276" data-name="Group 3276" width="42.735" height="42.735" viewBox="0 0 42.735 42.735"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <path id="Path_2848" data-name="Path 2848" d="M323.06,386.171a5.415,5.415,0,0,1-5.089-3.517l-13.324-35.7a5.415,5.415,0,0,0-5.089-3.517h19.231a5.413,5.413,0,0,1,5.089,3.517l13.326,35.7a5.412,5.412,0,0,0,5.089,3.517Z" transform="translate(-299.558 -343.436)" fill="#243d94" opacity="0.06" style="mix-blend-mode: normal;isolation: isolate"/>
  <g id="Group_3268" data-name="Group 3268" transform="translate(12.646 7.264)">
    <g id="Group_3233" data-name="Group 3233">
      <g id="Group_3232" data-name="Group 3232">
        <g id="Group_3228" data-name="Group 3228">
          <path id="Path_2851" data-name="Path 2851" d="M370.708,391.927c.576-3.269,4.647-7.265,8.986-7.359a6.005,6.005,0,0,1,1.443.135,2.774,2.774,0,0,1,2.261,2.969,2.692,2.692,0,0,1-3.088,1.974,4.874,4.874,0,0,1-2.384-.888c-.38-.264-.746-.547-1.12-.819a2.344,2.344,0,0,0-3.195-.062,7.181,7.181,0,0,0-2.5,3.344C371,391.46,371.038,391.8,370.708,391.927Z" transform="translate(-358.403 -379.93)" fill="#243d94"/>
          <path id="Path_2852" data-name="Path 2852" d="M338.44,415.575a1.589,1.589,0,0,1-.288-.692,6.391,6.391,0,0,0-1.269-2.5c-1.094-.923-2.867-1.337-3.856.489a3.436,3.436,0,0,1-2.1,1.719,2.125,2.125,0,0,1-2.324-.682,2.066,2.066,0,0,1-.111-2.36,4.63,4.63,0,0,1,4.648-2,6.459,6.459,0,0,1,4.941,4.143c.017.039.174.554.312,1.036A3.47,3.47,0,0,1,338.44,415.575Z" transform="translate(-328.178 -397.634)" fill="#243d94"/>
          <path id="Path_2853" data-name="Path 2853" d="M366.456,384.111a31.5,31.5,0,0,1,.294-3.853c.487-3.253,1.291-6.4,3.378-9.052a6.235,6.235,0,0,1,4.051-2.639,2,2,0,0,1,2.405,1.847,1.765,1.765,0,0,1-1.87,1.8c-.506.028-1.015.02-1.522,0a3.868,3.868,0,0,0-2.863,1.144,11.325,11.325,0,0,0-3.295,6.552C366.867,380.821,366.576,383.257,366.456,384.111Z" transform="translate(-355.381 -368.544)" fill="#243d94"/>
          <path id="Path_2854" data-name="Path 2854" d="M339.042,387.927c-.052-.034-.124-.054-.145-.1a5.885,5.885,0,0,0-3.528-2.8c-.968-.362-1.945-.7-2.913-1.058a4.269,4.269,0,0,1-1.292-.787,1.794,1.794,0,0,1-.6-2.126,1.922,1.922,0,0,1,1.987-1.012,4.95,4.95,0,0,1,2.982,1.568,17.6,17.6,0,0,1,3.57,6.189C339.111,387.825,339.07,387.87,339.042,387.927Z" transform="translate(-329.77 -376.705)" fill="#243d94"/>
          <path id="Path_2855" data-name="Path 2855" d="M370.821,409.144a4.718,4.718,0,0,1,2.581-3.626,3.687,3.687,0,0,1,3.858.18,1.677,1.677,0,0,1,.673,2.143,1.811,1.811,0,0,1-2.066.916,2.522,2.522,0,0,1-1.4-.7c-1.3-1.424-2.71-.543-3.431.705C370.962,408.892,370.892,409.018,370.821,409.144Z" transform="translate(-358.483 -394.496)" fill="#243d94"/>
          <path id="Path_2856" data-name="Path 2856" d="M356,389.094a33.66,33.66,0,0,0-1.307-5.263,8.913,8.913,0,0,0-1.809-3.126,4.019,4.019,0,0,1-.552-.74,1.173,1.173,0,0,1,.342-1.632,1.447,1.447,0,0,1,1.684.408,6.67,6.67,0,0,1,.978,2.915,28,28,0,0,1,.428,5.59A14.611,14.611,0,0,0,356,389.094Z" transform="translate(-345.208 -375.411)" fill="#243d94"/>
          <path id="Path_2857" data-name="Path 2857" d="M368.311,419.539a2.556,2.556,0,0,1,.1,1.08,12.372,12.372,0,0,0,.315,3.779,4.664,4.664,0,0,0,1.951,2.884,2.236,2.236,0,0,1,.409.334,1.3,1.3,0,0,1,.133,1.887,1.494,1.494,0,0,1-2.028-.187,2.9,2.9,0,0,1-.61-1.374,28.237,28.237,0,0,1-.355-8.166A1.329,1.329,0,0,1,368.311,419.539Z" transform="translate(-356.541 -404.785)" fill="#243d94"/>
          <path id="Path_2858" data-name="Path 2858" d="M362.8,420.935a9.345,9.345,0,0,1,.478,2.373,31.275,31.275,0,0,1,.314,4.248,14.236,14.236,0,0,0,.117,4.465.734.734,0,0,1,.006.2c0,.779-.363,1.306-.863,1.241-.47-.061-.8-.723-.656-1.4.17-.793.585-1.509.719-2.324a27.234,27.234,0,0,0-.188-8.208C362.7,421.346,362.553,421.158,362.8,420.935Z" transform="translate(-352.326 -405.777)" fill="#243d94"/>
          <path id="Path_2859" data-name="Path 2859" d="M356.659,427.078c.241-.018.216.193.239.319a7.042,7.042,0,0,1-.806,5.16,1.5,1.5,0,0,1-.892.74c-.362.1-.7.1-.915-.294a.8.8,0,0,1,.2-1.015.957.957,0,0,1,.276-.178c1.99-.951,2.149-2.994,1.847-4.5C356.594,427.218,356.579,427.144,356.659,427.078Z" transform="translate(-346.658 -410.142)" fill="#243d94"/>
          <path id="Path_2860" data-name="Path 2860" d="M370.245,421.633a6.28,6.28,0,0,0,.343,2,2.668,2.668,0,0,0,2,1.82,1.824,1.824,0,0,1,.5.162.586.586,0,0,1,.278.681c-.06.321-.305.409-.586.419a1.1,1.1,0,0,1-.621-.187A5.42,5.42,0,0,1,370.245,421.633Z" transform="translate(-358.025 -406.273)" fill="#243d94"/>
          <path id="Path_2861" data-name="Path 2861" d="M352.82,421.427c-.477-.34-.825-.369-1.152.195-.257.444-.762.308-1.138.181a.642.642,0,0,1-.355-.78,1.067,1.067,0,0,1,.979-.846C351.835,420.085,352.466,420.546,352.82,421.427Z" transform="translate(-343.796 -405.229)" fill="#243d94"/>
          <path id="Path_2862" data-name="Path 2862" d="M357.674,434.167c-.116.59-.323.819-.731.829-.137,0-.316-.061-.279-.194C356.789,434.352,357.273,434.508,357.674,434.167Z" transform="translate(-348.419 -415.18)" fill="#243d94"/>
          <path id="Path_2863" data-name="Path 2863" d="M363.6,420.031l-.018.042.013,0Z" transform="translate(-353.34 -405.135)" fill="#243d94"/>
          <path id="Path_2864" data-name="Path 2864" d="M357.541,402.58s1.748,1.382,2.323,9.862l.444,1.706s.124-6.694-2.54-12.079Z" transform="translate(-349.045 -392.37)" fill="#243d94"/>
          <path id="Path_2865" data-name="Path 2865" d="M362.162,397.85a25.885,25.885,0,0,1,1.1,5.638s-.364-6.339-.55-6.924S362.162,397.85,362.162,397.85Z" transform="translate(-352.329 -388.376)" fill="#243d94"/>
          <path id="Path_2866" data-name="Path 2866" d="M366.965,398.139a53.061,53.061,0,0,0-1.065,8.592s.48-5.3.849-6.547Z" transform="translate(-354.98 -389.576)" fill="#243d94"/>
          <path id="Path_2867" data-name="Path 2867" d="M370.138,401.044s-2.077,1.631-2.077,8.558l.179-.06a51.148,51.148,0,0,1,.58-5.09,11.171,11.171,0,0,1,1.13-3.006Z" transform="translate(-356.522 -391.641)" fill="#243d94"/>
          <path id="Path_2868" data-name="Path 2868" d="M357.933,423.12s1.16.93.533,3.141l-.1.458a3.952,3.952,0,0,0-.266-3.775S357.851,422.993,357.933,423.12Z" transform="translate(-349.312 -407.205)" fill="#243d94"/>
          <path id="Path_2869" data-name="Path 2869" d="M370.929,420.251a5.99,5.99,0,0,1-.253-5.665l.5.087a4,4,0,0,0-.659,1.039,4.455,4.455,0,0,0,.1,3.16,2.676,2.676,0,0,0,.754,1.247Z" transform="translate(-357.935 -401.265)" fill="#243d94"/>
        </g>
        <path id="md-globe" d="M8.105,3.375a4.73,4.73,0,1,0,4.73,4.73A4.73,4.73,0,0,0,8.105,3.375Zm-.49,8.755a4.055,4.055,0,0,1-2.6-6.655,4.528,4.528,0,0,1,.046.55,1.755,1.755,0,0,0,.226,1.336A2.2,2.2,0,0,1,5.505,8c.059.2.293.307.455.431.327.25.639.541.985.762.229.146.371.218.3.5a1.755,1.755,0,0,1-.185.562,1.14,1.14,0,0,0,.19.509c.17.17.34.327.526.48C8.069,11.479,7.752,11.788,7.615,12.13Zm3.357-1.158a4.027,4.027,0,0,1-2.1,1.116,1.684,1.684,0,0,1,.5-.668,1.7,1.7,0,0,0,.448-.554,3.788,3.788,0,0,1,.309-.528c.161-.248-.4-.622-.577-.7a5.952,5.952,0,0,1-1.073-.668c-.257-.181-.779.094-1.069-.032A5.59,5.59,0,0,1,6.333,8.2c-.357-.268-.339-.582-.339-.978.279.01.677-.077.862.147.059.071.26.387.394.275.11-.092-.082-.461-.118-.547-.114-.267.259-.37.45-.551.249-.236.784-.605.742-.774S7.788,5.127,7.5,5.2c-.043.011-.425.411-.5.474l.006-.392c0-.082-.154-.167-.147-.22.018-.135.393-.378.486-.486-.065-.041-.288-.232-.355-.2-.163.068-.347.115-.511.183a1.016,1.016,0,0,0-.015-.162l.32.129.226.268.226.233.2.064.313-.3.95-.51v-.19a4.01,4.01,0,0,1,1.717.678c-.092.008-.192.022-.306.036a.98.98,0,0,0-.158-.06c.148.319.3.634.461.949.168.337.541.7.606,1.053.077.419.024.8.066,1.292a2.208,2.208,0,0,0,.535,1.014,1.076,1.076,0,0,0,.418.051,4.032,4.032,0,0,1-1.063,1.866Z" transform="translate(12.773 12.218)" fill="#179aa9"/>
      </g>
    </g>
  </g>
</svg>